services:
 
  minio:
    image: minio/minio:latest
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    command: server /data --console-address ":9001"
    volumes:
      - minio-data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
      start_period: 10s
    networks:
      spark-net:
          aliases:
            - minio  # Add explicit alias

  spark-master:
    image: bitnami/spark:3.4.1
    container_name: spark-master
    user: "1001"  # This is typically the Bitnami spark user ID
    environment:
        - SPARK_MODE=master
        - SPARK_MASTER_PORT=7077
        - SPARK_MASTER_WEBUI_PORT=8080
    ports:
        - "8080:8080"
        - "7077:7077"
    volumes:
        - ./spark-conf:/opt/bitnami/spark/conf:rw,z
        - ./delta-jars:/opt/bitnami/spark/delta-jars
    networks:
        - spark-net
    deploy:
        restart_policy:
            condition: on-failure
            delay: 5s
            max_attempts: 3
    healthcheck:
      test: ["CMD", "true"]  # Simplify health check temporarily
      interval: 5s
      timeout: 5s
      retries: 3
    depends_on:
      minio:
        condition: service_healthy


  spark-worker:
    image: bitnami/spark:3.4.1
    container_name: spark-worker
    user: "1001"  # This is typically the Bitnami spark user ID
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=4G
      - SPARK_WORKER_CORES=2
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    volumes:
      - ./spark-conf:/opt/bitnami/spark/conf
      - ./delta-jars:/opt/bitnami/spark/delta-jars
    depends_on:
      spark-master:
        condition: service_healthy
    networks:
      - spark-net


  createbucket:
    container_name: createbucket
    image: minio/mc:latest
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      until (/usr/bin/mc alias set myminio http://minio:9000 minioadmin minioadmin); do echo 'Waiting for MinIO...'; sleep 1; done;
      /usr/bin/mc mb myminio/wba;
      /usr/bin/mc policy set public myminio/wba;
      echo 'Bucket created successfully `myminio/wba`.';
      echo 'Access permission for `myminio/wba` is set to `public`';
      "
    networks:
      - spark-net

  kyuubi:
    image: apache/kyuubi:1.8.0
    container_name: kyuubi-server
    ports:
      - "10009:10009"  # Kyuubi server
      - "10099:10099"  # Kyuubi web UI
    environment:
 #     - KYUUBI_JAVA_OPTS=-Dkyuubi.frontend.thrift.binary.bind.host=0.0.0.0 -Dkyuubi.authentication=NONE -Dkyuubi.frontend.thrift.binary.sasl.enabled=false -Dkyuubi.ssl.enabled=false  -Djavax.security.auth.useSubjectCredsOnly=false
      - KYUUBI_HOME=/opt/kyuubi
      - KYUUBI_WORK_DIR_ROOT=/opt/kyuubi/work
      - SPARK_HOME=/opt/spark
    volumes:
      - ./kyuubi-conf:/opt/kyuubi/conf
      - ./spark-conf:/opt/spark/conf
      - ./warehouse:/opt/kyuubi/warehouse
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:10099/api/v1/ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s  
    depends_on:
      - spark-master
      - minio
    networks:
      - spark-net

  dev:
    build: 
      context: .
      dockerfile: .devcontainer/Dockerfile.dev
    volumes:
      - ..:/workspace:cached
      - delta-spark-cache:/root/.cache
      - /var/run/docker.sock:/var/run/docker.sock
    user: vscode
    command: sleep infinity
    environment:
      - PYTHONPATH=/workspace
      - SPARK_HOME=/opt/spark
      - DEBIAN_FRONTEND=noninteractive
    depends_on:
      - kyuubi
      - spark-master
      - minio
    networks:
      - spark-net

networks:
  spark-net:
    driver: bridge

volumes:
  minio-data:
  delta-spark-cache:

